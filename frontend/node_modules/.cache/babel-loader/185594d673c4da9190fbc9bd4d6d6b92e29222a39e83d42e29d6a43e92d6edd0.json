{"ast":null,"code":"var _jsxFileName = \"/Users/deepika/Desktop/PROJECTS/travel-toes/frontend/src/pages/AnimatedChart.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport Chart from 'chart.js/auto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AnimatedChart = () => {\n  _s();\n  const chartRef = useRef(null);\n  let chartInstance = null;\n  useEffect(() => {\n    // Initialize the chart\n    chartInstance = new Chart(chartRef.current, {\n      type: 'line',\n      data: getInitialData(),\n      options: {\n        animation: {\n          duration: 2000,\n          easing: 'easeInOutQuad',\n          onComplete: () => {\n            setTimeout(() => {\n              if (chartInstance) {\n                chartInstance.clear();\n                chartInstance.update();\n              }\n            }, 0);\n          }\n        }\n      }\n    });\n\n    // Start interval for continuous updates\n    const animationInterval = setInterval(() => {\n      if (chartInstance) {\n        chartInstance.data.datasets.forEach(dataset => {\n          dataset.data = generateNewData();\n        });\n        chartInstance.update();\n      }\n    }, 2000);\n    return () => {\n      clearInterval(animationInterval);\n      if (chartInstance) {\n        chartInstance.destroy();\n      }\n    };\n  }, []);\n  const getInitialData = () => ({\n    labels: Array.from({\n      length: 10\n    }, (_, i) => i + 1),\n    datasets: [{\n      label: 'Dataset',\n      data: generateNewData(),\n      borderColor: 'rgba(75, 192, 192, 1)',\n      backgroundColor: 'rgba(75, 192, 192, 0.2)'\n    }]\n  });\n  const generateNewData = () => Array.from({\n    length: 10\n  }, () => Math.floor(Math.random() * 100));\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: chartRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 10\n  }, this);\n};\n_s(AnimatedChart, \"X+1SfQQ6xefXNU27aQW843M7cTw=\");\n_c = AnimatedChart;\nexport default AnimatedChart;\nvar _c;\n$RefreshReg$(_c, \"AnimatedChart\");","map":{"version":3,"names":["React","useRef","useEffect","Chart","jsxDEV","_jsxDEV","AnimatedChart","_s","chartRef","chartInstance","current","type","data","getInitialData","options","animation","duration","easing","onComplete","setTimeout","clear","update","animationInterval","setInterval","datasets","forEach","dataset","generateNewData","clearInterval","destroy","labels","Array","from","length","_","i","label","borderColor","backgroundColor","Math","floor","random","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/deepika/Desktop/PROJECTS/travel-toes/frontend/src/pages/AnimatedChart.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport Chart from 'chart.js/auto';\n\nconst AnimatedChart = () => {\n  const chartRef = useRef(null);\n  let chartInstance = null;\n\n  useEffect(() => {\n    // Initialize the chart\n    chartInstance = new Chart(chartRef.current, {\n      type: 'line',\n      data: getInitialData(),\n      options: {\n        animation: {\n          duration: 2000,\n          easing: 'easeInOutQuad',\n          onComplete: () => {\n            setTimeout(() => {\n              if (chartInstance) {\n                chartInstance.clear();\n                chartInstance.update();\n              }\n            }, 0);\n          }\n        }\n      }\n    });\n\n    // Start interval for continuous updates\n    const animationInterval = setInterval(() => {\n      if (chartInstance) {\n        chartInstance.data.datasets.forEach(dataset => {\n          dataset.data = generateNewData();\n        });\n        chartInstance.update();\n      }\n    }, 2000);\n\n    return () => {\n      clearInterval(animationInterval);\n      if (chartInstance) {\n        chartInstance.destroy();\n      }\n    };\n  }, []);\n\n  const getInitialData = () => ({\n    labels: Array.from({ length: 10 }, (_, i) => i + 1),\n    datasets: [\n      {\n        label: 'Dataset',\n        data: generateNewData(),\n        borderColor: 'rgba(75, 192, 192, 1)',\n        backgroundColor: 'rgba(75, 192, 192, 0.2)',\n      }\n    ]\n  });\n\n  const generateNewData = () => Array.from({ length: 10 }, () => Math.floor(Math.random() * 100));\n\n  return <canvas ref={chartRef} />;\n};\n\nexport default AnimatedChart;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAChD,OAAOC,KAAK,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAMC,QAAQ,GAAGP,MAAM,CAAC,IAAI,CAAC;EAC7B,IAAIQ,aAAa,GAAG,IAAI;EAExBP,SAAS,CAAC,MAAM;IACd;IACAO,aAAa,GAAG,IAAIN,KAAK,CAACK,QAAQ,CAACE,OAAO,EAAE;MAC1CC,IAAI,EAAE,MAAM;MACZC,IAAI,EAAEC,cAAc,CAAC,CAAC;MACtBC,OAAO,EAAE;QACPC,SAAS,EAAE;UACTC,QAAQ,EAAE,IAAI;UACdC,MAAM,EAAE,eAAe;UACvBC,UAAU,EAAEA,CAAA,KAAM;YAChBC,UAAU,CAAC,MAAM;cACf,IAAIV,aAAa,EAAE;gBACjBA,aAAa,CAACW,KAAK,CAAC,CAAC;gBACrBX,aAAa,CAACY,MAAM,CAAC,CAAC;cACxB;YACF,CAAC,EAAE,CAAC,CAAC;UACP;QACF;MACF;IACF,CAAC,CAAC;;IAEF;IACA,MAAMC,iBAAiB,GAAGC,WAAW,CAAC,MAAM;MAC1C,IAAId,aAAa,EAAE;QACjBA,aAAa,CAACG,IAAI,CAACY,QAAQ,CAACC,OAAO,CAACC,OAAO,IAAI;UAC7CA,OAAO,CAACd,IAAI,GAAGe,eAAe,CAAC,CAAC;QAClC,CAAC,CAAC;QACFlB,aAAa,CAACY,MAAM,CAAC,CAAC;MACxB;IACF,CAAC,EAAE,IAAI,CAAC;IAER,OAAO,MAAM;MACXO,aAAa,CAACN,iBAAiB,CAAC;MAChC,IAAIb,aAAa,EAAE;QACjBA,aAAa,CAACoB,OAAO,CAAC,CAAC;MACzB;IACF,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMhB,cAAc,GAAGA,CAAA,MAAO;IAC5BiB,MAAM,EAAEC,KAAK,CAACC,IAAI,CAAC;MAAEC,MAAM,EAAE;IAAG,CAAC,EAAE,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,GAAG,CAAC,CAAC;IACnDX,QAAQ,EAAE,CACR;MACEY,KAAK,EAAE,SAAS;MAChBxB,IAAI,EAAEe,eAAe,CAAC,CAAC;MACvBU,WAAW,EAAE,uBAAuB;MACpCC,eAAe,EAAE;IACnB,CAAC;EAEL,CAAC,CAAC;EAEF,MAAMX,eAAe,GAAGA,CAAA,KAAMI,KAAK,CAACC,IAAI,CAAC;IAAEC,MAAM,EAAE;EAAG,CAAC,EAAE,MAAMM,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC;EAE/F,oBAAOpC,OAAA;IAAQqC,GAAG,EAAElC;EAAS;IAAAmC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAClC,CAAC;AAACvC,EAAA,CA1DID,aAAa;AAAAyC,EAAA,GAAbzC,aAAa;AA4DnB,eAAeA,aAAa;AAAC,IAAAyC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}